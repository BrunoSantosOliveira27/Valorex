1. Criar um repositório

2. Clonar o repositório localmente

3. Criar um pasta Banco de Dados, no repositório, e escrever o script SQL para criar o banco de dados e inserir alguns dados

4. Criar o projeto (Terminal) do repositório:

	dotnet new mvc -o <NomeProjeto>
	cd <NomeProjeto>

5. Instalar os pacotes de acesso a banco de dados (Database-First), utilizando o Nuget Gallery:
	5.1. Pressione Ctrl + Shift + P
	5.2. Digitar Nuget e abrir a ferramenta
	5.3. Pesquisar e Instalar os pacotes, ultima atualização da versão 8:
		- Microsoft.EntityFrameworkCore
		- Pomelo.EntityFrameworkCore.MySql

6. Criar na pasta Models as classes de dados (Cada tabela do banco deve ser escrita como uma classe)
	6.1. Exemplo:
			using System.ComponentModel.DataAnnotations;
			using System.ComponentModel.DataAnnotations.Schema;

			namespace Pokedex.Models;

			[Table("Tipo")]
			public class Tipo
			{
				[Key]
				[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
				public int Id { get; set; }

				[Required]
				[StringLength(30)]
				public string Nome { get; set; }

				[Required]
				[StringLength(25)]
				public string Cor { get; set; }

				public ICollection<PokemonTipo> Pokemons { get; set; }
			}


7. Criar uma pasta Data e dentro uma classe AppDbContext, alterando os DbSet de acordo com as classes da pasta Models do seu projeto.
	7.1. Exemplo:
			using Microsoft.AspNetCore.Identity;
			using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
			using Microsoft.EntityFrameworkCore;
			using Pokedex.Models;

			namespace Pokedex.Data;

			public class AppDbContext : IdentityDbContext
			{

				public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
				{
				}

				public DbSet<Genero> Generos { get; set; }
				public DbSet<Pokemon> Pokemons { get; set; }
				public DbSet<PokemonTipo> PokemonTipos { get; set; }
				public DbSet<Regiao> Regioes { get; set; }
				public DbSet<Tipo> Tipos { get; set; }

				protected override void OnModelCreating(ModelBuilder builder)
				{
					base.OnModelCreating(builder);
				}
			}

8. Incluir no arquivo appsettings.json a ConnectionString do seu banco
	8.1. Exemplo:
			{
			  "Logging": {
				"LogLevel": {
				  "Default": "Information",
				  "Microsoft.AspNetCore": "Warning"
				}
			  },
			  "AllowedHosts": "*",
			  "ConnectionStrings": {
				"PokedexConexao" : "server=localhost;port=3306;database=pokedex;uid=root;pwd=''"
			  }
			}

9. Incluir no arquivo Program.cs o serviço de conexão com o banco
	9.1. Exemplo:
			using Microsoft.AspNetCore.Identity;
			using Microsoft.EntityFrameworkCore;
			using Pokedex.Data;
			using Pokedex.Services;

			var builder = WebApplication.CreateBuilder(args);

			// Add services to the container.
			string conexao = builder.Configuration
				.GetConnectionString("PokedexConexao");
			var versao = ServerVersion.AutoDetect(conexao);
			builder.Services.AddDbContext<AppDbContext>(
				opt => opt.UseMySql(conexao, versao)
			);
			
			<Tem mais coisas aqui, não apague nada nesse arquivo>
	
10. Inclua os arquivos estáticos, imagens, css, js, na pasta wwwroot. Utilize os da Pokedex como base, e troque as imagens.

11. Altere o arquivo Views\Shared\_Layout.cshtml, use o arquivo da Pokedex como base:
	11.1. Apague o arquivo Views\Shared\_Layout.cshtml.css
	11.2. Exemplo:
			<!doctype html>
			<html lang="pt-br">

			<head>
				<meta charset="utf-8">
				<meta name="viewport" content="width=device-width, initial-scale=1">
				<title>Pokedex</title>

				<!-- Favicons -->
				<link rel="apple-touch-icon" href="~/img/favicons/apple-touch-icon.png" sizes="180x180">
				<link rel="icon" href="~/img/favicons/favicon-32x32.png" sizes="32x32" type="image/png">
				<link rel="icon" href="~/img/favicons/favicon-16x16.png" sizes="16x16" type="image/png">
				<link rel="icon" href="~/img/favicons/favicon.ico">

				<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
				<link rel="stylesheet" href="~/css/site.css" />

			</head>

			<body class="min-vh-100 d-flex flex-column justify-content-between bg-dark">
				<header>
					<div class="collapse bg-danger" id="navbarHeader">
						<div class="container">
							<div class="row">
								<div class="col-sm-8 col-md-7 py-4">
									<h4 class="text-white">Sobre</h4>
									<p class="text-white">
										Projeto desenvolvido para demonstrar a criação de páginas WEB com .Net 8.
										Demonstrar a criação de aplicações com padrão MVC e persistência de dados em Banco MySQL,
										além de boas práticas de Programação Orientada a Objetos e Páginas Dinâmicas.
									</p>
								</div>
								<div class="col-sm-4 offset-md-1 py-4">
									<h4 class="text-white">Contatos</h4>
									<ul class="list-unstyled">
										<li><a href="#" class="text-white">Follow on Twitter</a></li>
										<li><a href="#" class="text-white">Like on Facebook</a></li>
										<li><a href="#" class="text-white">E-mail</a></li>
									</ul>
								</div>
							</div>
						</div>
					</div>
					<div class="navbar navbar-dark bg-danger shadow-sm">
						<div class="container">
							<a asp-action="Index" class="navbar-brand d-flex align-items-center">
								<img src="~/img/favicons/favicon-32x32.png" alt="Pokeball" class="me-2" />
								&nbsp;<strong>POKÉDEX</strong>
							</a>
							<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader"
								aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
								<span class="navbar-toggler-icon"></span>
							</button>
						</div>
					</div>
				</header>

				<main class="flex-fill d-flex align-items-center">
					@RenderBody()
				</main>
					<footer class="py-3">
					<div class="container text-white">
						<hr>
						<p class="float-end">
							<a href="#">
								<i class="bi bi-arrow-up-circle-fill text-danger fs-2"></i>
							</a>
						</p>
						<p class="mb-1">Pokédex - Versão Gallo</p>
						<p>Projeto desenvolvido para as aulas de Programação para Web II</p>
					</div>
				</footer>

				<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
				<script src="~/lib/jquery/dist/jquery.min.js"></script>
				@await RenderSectionAsync("Scripts", required: false)
			</body>
			</html>	

12. Crie uma pasta ViewModels, e adicione as classes que forem necessárias
	12.1. Exemplo:
			using Pokedex.Models;

			namespace Pokedex.ViewModels
			{
				public class HomeVM
				{
					public List<Tipo> Tipos { get; set; }
					public List<Pokemon> Pokemons { get; set; }
				}
			}	

13. Altere o HomeController, para injetar o serviço de acesso ao banco de dados, e consultar os dados do banco para envio as Views
	13.1. Exemplo:
			using System.Diagnostics;
			using Microsoft.AspNetCore.Mvc;
			using Microsoft.EntityFrameworkCore;
			using Pokedex.Data;
			using Pokedex.Models;
			using Pokedex.ViewModels;

			namespace Pokedex.Controllers;

			public class HomeController : Controller
			{
				private readonly ILogger<HomeController> _logger;
				private readonly AppDbContext _context;

				public HomeController(ILogger<HomeController> logger, AppDbContext context)
				{
					_logger = logger;
					_context = context;
				}

				public IActionResult Index()
				{
					HomeVM home = new() {
						Tipos = _context.Tipos.ToList(),
						Pokemons = _context.Pokemons
							.Include(p => p.Tipos)
							.ThenInclude(t => t.Tipo)
							.Include(p => p.Regiao)
							.Include(p => p.Genero)
							.ToList(),
					};
					return View(home);
				}

				public IActionResult Details(int id)
				{
					Pokemon pokemon = _context.Pokemons
									.Where(p => p.Numero == id)
									.Include(p => p.Tipos)
									.ThenInclude(t => t.Tipo)
									.Include(p => p.Regiao)
									.Include(p => p.Genero)
									.SingleOrDefault();
					
					DetailVM detailVM = new()
					{
						Atual = pokemon,
						Anterior = _context.Pokemons
							.OrderByDescending(p => p.Numero)
							.FirstOrDefault(p => p.Numero < id),
						Proximo = _context.Pokemons
							.OrderBy(p => p.Numero)
							.FirstOrDefault( p => p.Numero > id)
					};
					
					return View(detailVM);
				}
				

				public IActionResult Privacy()
				{
					return View();
				}

				[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
				public IActionResult Error()
				{
					return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
				}
			}

14. Altere o arquivo Views\Home\Index.cshtml, para exibir os dados do banco:
	14.1. Exemplo:
			@model Pokedex.ViewModels.HomeVM
			@{
				ViewData["Title"] = "Home";
				string BackgroundColor(string cor)
				{
					return cor.Replace("1)", "0.75)");
				};
			}

			<div class="pt-5 container">
				<div class="row">
					<div class="col mx-auto text-center">
						<h1 class="display-4 text-white">Pokédex</h1>
						<div class="my-3">
							<button id="btn-all" class="btn btn-md my-2 text-white bg-secondary btn-filter" onclick="filter('')">
								Ver Todos
							</button>

							@foreach (var tipo in Model.Tipos)
							{
								<button id="btn-@tipo.Nome" class="btn btn-sm my-2 text-white btn-filter"
									style="background-color:@tipo.Cor" onclick="filter('@tipo.Nome')">@tipo.Nome</button>
							}
						</div>
					</div>
				</div>

				<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">

					@foreach (var pokemon in Model.Pokemons)
					{
						<!-- Card Pokemon - Inicio -->
						<div class="col poke @string.Join(' ', pokemon.Tipos.Select(t => t.Tipo.Nome))">
							<a asp-action="Details" asp-route-id="@pokemon.Numero" class="text-decoration-none">
								<div class="card" style="background-color: @BackgroundColor(pokemon.Tipos.ToArray()[0].Tipo.Cor)">
									<img src="@pokemon.Imagem" class="card-img-top" alt="@pokemon.Nome" />
									<div class="card-body">
										<h5 class="card-text mb-1 text-white">Nº @pokemon.Numero.ToString("000")</h5>
										<h3 class="card-title text-dark">@pokemon.Nome</h3>
										<div class="d-flex justify-content-between align-items-center">
											<div class="d-flex gap-2 my-2">
												@foreach (var tipo in pokemon.Tipos)
												{
													<a href="#" class="btn text-white"
														style="background-color:@tipo.Tipo.Cor">@tipo.Tipo.Nome</a>
												}
											</div>
										</div>
									</div>
								</div>
							</a>
						</div>
						<!-- Card Pokemon - Fim -->
					}
				</div>
				<div id="zeroPokemon" class="col-lg-12 text-center d-none mt-5" style="height: 350px;">
					<h1 class="my-3 text-danger">Nenhum Pokemon Encontrado</h1>
				</div>
			</div>

			@section Scripts {
				<script src="~/js/site.js"></script>
			}	

15. Crie o arquivo Views\Home\Details.cshtml
	15.1. Exemplo:
			@model Pokedex.ViewModels.DetailVM
			@{
				ViewData["Title"] = "Pokemon";
			}

			<div class="container text-white">
				<div class="row">
					<div class="col text-center">
						@if (Model.Anterior != null)
						{
							<a asp-action="Details" asp-route-id="@Model.Anterior.Numero"
								class="btn btn-lg btn-outline-danger text-white">
								@Model.Anterior.Numero.ToString("000") - @Model.Anterior.Nome
							</a>
						}
					</div>

					<div class="col text-center">
						<h1 class="fs-1">@Model.Atual.Nome <span class="fs-2 text-secondary">Nº @Model.Atual.Numero.ToString("000")</span></h1>
					</div>
					
					<div class="col text-center">
						@if (Model.Proximo != null)
						{
							<a asp-action="Details" asp-route-id="@Model.Proximo.Numero"
								class="btn btn-lg btn-outline-danger text-white">
								@Model.Proximo.Numero.ToString("000") - @Model.Proximo.Nome
							</a>
						}
					</div>
				</div>

				<div class="row mt-5">
					<div class="col-lg-5 p-0">
						<img class="img-fluid cursor-pointer" src="@Model.Atual.Imagem" alt="@Model.Atual.Nome">
					</div>
					<div class="col-lg-7 fs-5 mt-4">
						<p class="mb-3"><strong>Descrição:</strong> @Model.Atual.Descricao</p>
						<p class="mb-3"><strong>Gênero:</strong> @Model.Atual.Genero.Nome</p>
						<p class="mb-3"><strong>Região:</strong> @Model.Atual.Regiao.Nome</p>
						<p class="mb-3"><strong>Altura:</strong> @Model.Atual.Altura mts</p>
						<p class="mb-3"><strong>Peso:</strong> @Model.Atual.Peso kgs</p>
						<p class="fw-bold">Tipo</p>
						<div class="d-flex gap-2 my-2">
							@foreach (var tipo in Model.Atual.Tipos)
							{
								<a href="#" class="btn btn-lg text-white" style="background-color:@tipo.Tipo.Cor">@tipo.Tipo.Nome</a>
							}
						</div>
					</div>
				</div>
			</div>